/*--------------------------------------------------------------------------------------+
|
|     $Source: ITwinUtilityLibrary.h $
|
|  $Copyright: (c) 2024 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/

#pragma once

#include <Kismet/BlueprintFunctionLibrary.h>
#include <glm/glm.hpp>
#include <ITwinUtilityLibrary.generated.h>

UCLASS()
class ITWINRUNTIME_API UITwinUtilityLibrary: public UBlueprintFunctionLibrary
{
	GENERATED_BODY()
public:
	//! Returns the transform from the iModel spatial coordinates into ECEF coordinates.
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static FTransform GetIModelToEcefTransform(const AITwinIModel* IModel);
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static FTransform GetEcefToIModelTransform(const AITwinIModel* IModel);
	//! Return the transform from ECEF to Unreal space.
	//! StandardizeAndFixAngles is NOT included in this function.
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static FTransform GetEcefToUnrealTransform(const AITwinIModel* IModel);
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static FTransform GetUnrealToEcefTransform(const AITwinIModel* IModel);

	//! Applies several fixes for transformations from some input space into Unreal world space
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static FTransform StandardizeAndFixAngles(FTransform FinalTransformToUnreal);

	//! Returns the transform from the iModel spatial coordinates into Unreal world coordinates, taking into
	//! account geolocation etc. StandardizeAndFixAngles is included in the call.
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static FTransform GetIModelToUnrealTransform(const AITwinIModel* IModel);
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static void GetIModelBaseFromUnrealTransform(const AITwinIModel* IModel, const FTransform& Transform,
												 FVector& Location_ITwin, FRotator& Rotation_ITwin);
	//! Returns the transform from the camera space of the given saved view, into Unreal world coordinates,
	//! taking into account geolocation etc. StandardizeAndFixAngles is included in the call.
	//! Also takes into account the (manual) transformation applied to the iModel tileset.
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static FTransform GetSavedViewUnrealTransform(const AITwinIModel* IModel, const FSavedView& SavedView);
	//! Returns the Itwin saved view for the given Unreal transfo taking geolocation into account.
	//! Also takes into account the (manual) transformation applied to the iModel tileset.
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static FSavedView GetSavedViewFromUnrealTransform(const AITwinIModel* IModel, const FTransform& Transform);
	//! Returns the Itwin saved view frustum for the given Unreal transfo.
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static void GetSavedViewFrustumFromUnrealTransform(const AITwinIModel* IModel, const FTransform& Transform,
		FSavedView& SavedView);
	//! Returns the Itwin saved view for the current Unreal view, taking geolocation into account.
	//! Also takes into account the (manual) transformation applied to the iModel tileset.
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static bool GetSavedViewFromPlayerController(const AITwinIModel* IModel, FSavedView& OutSavedView);
	//! Returns the Itwin saved view frustum for the current Unreal view.
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static void GetSavedViewFrustumFromPlayerController(const AITwinIModel* IModel, FSavedView& SavedView);

	//! Converts yaw/pitch/roll angles from iTwin convention to Unreal convention,
	//! so that the matrices generated by these angles using the iTwin api and the Unreal api
	//! are identical. These apis are:
	//! - iTwin: YawPitchRollAngles.toMatrix3d()
	//! - Unreal: TRotationTranslationMatrix ctor
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static FRotator ConvertRotator_ITwinToUnreal(const FRotator& ITwinRotator);

	//! Duplicated from this (not exported) function in CesiumRuntime:
	//! FMatrix FITwinVecMath::createMatrix(const glm::dmat4& m)
	static FMatrix ConvertMatrix_GlmToUnreal(const glm::dmat4& m);
};
