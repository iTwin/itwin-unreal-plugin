/*--------------------------------------------------------------------------------------+
|
|     $Source: ITwinUtilityLibrary.h $
|
|  $Copyright: (c) 2024 Bentley Systems, Incorporated. All rights reserved. $
|
+--------------------------------------------------------------------------------------*/

#pragma once

#include <Kismet/BlueprintFunctionLibrary.h>
#include <glm/glm.hpp>
#include <ITwinUtilityLibrary.generated.h>

UCLASS()
class ITWINRUNTIME_API UITwinUtilityLibrary: public UBlueprintFunctionLibrary
{
	GENERATED_BODY()
public:
	//! Returns the transform for the camera of the given saved view, in Unreal world coordinates,
	//! taking into account geolocation etc.
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static FTransform GetSavedViewUnrealTransform(const AITwinIModel* IModel, const FSavedView& SavedView);
	//! Returns the Itwin saved view for the given Unreal transform,
	//! taking geolocation into account.
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static FSavedView GetSavedViewFromUnrealTransform(const AITwinIModel* IModel, const FTransform& Transform);
	//! Returns the Itwin saved view for the current Unreal view,
	//! taking geolocation into account.
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static bool GetSavedViewFromPlayerController(const AITwinIModel* IModel, FSavedView& OutSavedView);
	//! Converts yaw/pitch/roll angles from iTwin convention to Unreal convention,
	//! so that the matrices generated by these angles using the iTwin api and the Unreal api
	//! are identical. These apis are:
	//! - iTwin: YawPitchRollAngles.toMatrix3d()
	//! - Unreal: TRotationTranslationMatrix ctor
	UFUNCTION(BlueprintCallable, Category = "iTwin")
	static FRotator ConvertRotator_ITwinToUnreal(const FRotator& ITwinRotator);
	
	//! Duplicated from this (not exported) function in CesiumRuntime:
	//! FMatrix FITwinVecMath::createMatrix(const glm::dmat4& m)
	static FMatrix ConvertMatrix_GlmToUnreal(const glm::dmat4& m);
};
